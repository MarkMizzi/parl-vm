import {
  type PixIRInstruction,
  PixIROpcode,
  PushOperandType,
  readInstr,
  validateFunctionName
} from './instructions'

export interface Program {
  instrs: PixIRInstruction[]
  // pointers into instrs where every function starts
  funcs: Map<string, number>
}

export class Assembler {
  /* Validate a program generated by the Assembler instance.
   *
   * Currenly the following checks are implemented:
   * - Check that each function referenced in a push instruction exists in the program.
   * - Check that the program contains a .main function (this is the entry point).
   */
  private validate(program: Program) {
    // check that each function referenced in push instruction is within the program.
    for (const instr of program.instrs) {
      if (instr.opcode == PixIROpcode.PUSH) {
        const operand = instr.operand!
        if (
          operand.dtype == PushOperandType.FUNCTION &&
          !program.funcs.has(operand.val as string)
        ) {
          throw SyntaxError(`Function ${operand!.val} not found.`)
        }
      }
    }

    if (!program.funcs.has('.main')) throw SyntaxError('Program does not have a .main function.')
  }

  /* Assemble an input source string into an actual Program object that
   * can be executed by the machine.
   */
  public assemble(src: string): Program {
    let instrs = []
    let funcs = new Map()

    const srcLines = src.split('\n')

    let i = 0
    for (let line of srcLines) {
      // remove extra whitespace
      line = line
        .replace(/\/\/.*$/, '') // remove line comments starting with //
        .trim()

      // skip empty or comment lines
      if (line.length == 0) instrs.push({ opcode: PixIROpcode.NOP })

      // check if this line starts a new function
      if (line[0] == '.') {
        validateFunctionName(line)
        instrs.push({ opcode: PixIROpcode.NOP })
        funcs.set(line, i)
      } else {
        // line must be a new instruction; read it and add it to instrs.
        instrs.push(readInstr(line))
      }

      i++
    }

    const program = { instrs, funcs }
    this.validate(program)
    return program
  }
}
